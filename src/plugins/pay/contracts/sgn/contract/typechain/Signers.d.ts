/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SignersInterface extends ethers.utils.Interface {
  functions: {
    "increaseNoticePeriod(uint256)": FunctionFragment;
    "noticePeriod()": FunctionFragment;
    "notifyResetSigners()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resetSigners(address[],uint256[])": FunctionFragment;
    "resetTime()": FunctionFragment;
    "ssHash()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "triggerTime()": FunctionFragment;
    "updateSigners(uint256,address[],uint256[],bytes[],address[],uint256[])": FunctionFragment;
    "verifySigs(bytes,bytes[],address[],uint256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "increaseNoticePeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "noticePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "notifyResetSigners",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetSigners",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "resetTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "ssHash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "triggerTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateSigners",
    values: [
      BigNumberish,
      string[],
      BigNumberish[],
      BytesLike[],
      string[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifySigs",
    values: [BytesLike, BytesLike[], string[], BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "increaseNoticePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "noticePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "notifyResetSigners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetSigners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resetTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ssHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSigners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifySigs", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "ResetNotification(uint256)": EventFragment;
    "SignersUpdated(address[],uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResetNotification"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignersUpdated"): EventFragment;
}

export class Signers extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SignersInterface;

  functions: {
    increaseNoticePeriod(
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    noticePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    notifyResetSigners(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resetSigners(
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resetTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    ssHash(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    triggerTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateSigners(
      _triggerTime: BigNumberish,
      _newSigners: string[],
      _newPowers: BigNumberish[],
      _sigs: BytesLike[],
      _curSigners: string[],
      _curPowers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifySigs(
      _msg: BytesLike,
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  increaseNoticePeriod(
    period: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  noticePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  notifyResetSigners(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resetSigners(
    _signers: string[],
    _powers: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resetTime(overrides?: CallOverrides): Promise<BigNumber>;

  ssHash(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  triggerTime(overrides?: CallOverrides): Promise<BigNumber>;

  updateSigners(
    _triggerTime: BigNumberish,
    _newSigners: string[],
    _newPowers: BigNumberish[],
    _sigs: BytesLike[],
    _curSigners: string[],
    _curPowers: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifySigs(
    _msg: BytesLike,
    _sigs: BytesLike[],
    _signers: string[],
    _powers: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    increaseNoticePeriod(
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    noticePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    notifyResetSigners(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resetSigners(
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    resetTime(overrides?: CallOverrides): Promise<BigNumber>;

    ssHash(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    triggerTime(overrides?: CallOverrides): Promise<BigNumber>;

    updateSigners(
      _triggerTime: BigNumberish,
      _newSigners: string[],
      _newPowers: BigNumberish[],
      _sigs: BytesLike[],
      _curSigners: string[],
      _curPowers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    verifySigs(
      _msg: BytesLike,
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    ResetNotification(
      resetTime?: null
    ): TypedEventFilter<[BigNumber], { resetTime: BigNumber }>;

    SignersUpdated(
      _signers?: null,
      _powers?: null
    ): TypedEventFilter<
      [string[], BigNumber[]],
      { _signers: string[]; _powers: BigNumber[] }
    >;
  };

  estimateGas: {
    increaseNoticePeriod(
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    noticePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    notifyResetSigners(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resetSigners(
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resetTime(overrides?: CallOverrides): Promise<BigNumber>;

    ssHash(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    triggerTime(overrides?: CallOverrides): Promise<BigNumber>;

    updateSigners(
      _triggerTime: BigNumberish,
      _newSigners: string[],
      _newPowers: BigNumberish[],
      _sigs: BytesLike[],
      _curSigners: string[],
      _curPowers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifySigs(
      _msg: BytesLike,
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    increaseNoticePeriod(
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    noticePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    notifyResetSigners(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resetSigners(
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resetTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ssHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    triggerTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateSigners(
      _triggerTime: BigNumberish,
      _newSigners: string[],
      _newPowers: BigNumberish[],
      _sigs: BytesLike[],
      _curSigners: string[],
      _curPowers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifySigs(
      _msg: BytesLike,
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

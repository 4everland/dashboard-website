/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "Bridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Bridge__factory>;
    getContractFactory(
      name: "FarmingRewards",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FarmingRewards__factory>;
    getContractFactory(
      name: "Govern",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Govern__factory>;
    getContractFactory(
      name: "IPeggedToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPeggedToken__factory>;
    getContractFactory(
      name: "ISigsVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISigsVerifier__factory>;
    getContractFactory(
      name: "IUniswapV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "BatchTransfer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BatchTransfer__factory>;
    getContractFactory(
      name: "CrossChainSwap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrossChainSwap__factory>;
    getContractFactory(
      name: "ISwapToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwapToken__factory>;
    getContractFactory(
      name: "TransferSwap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransferSwap__factory>;
    getContractFactory(
      name: "IBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridge__factory>;
    getContractFactory(
      name: "MsgBusAddr",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MsgBusAddr__factory>;
    getContractFactory(
      name: "MsgReceiverApp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MsgReceiverApp__factory>;
    getContractFactory(
      name: "MsgSenderApp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MsgSenderApp__factory>;
    getContractFactory(
      name: "MessageBus",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageBus__factory>;
    getContractFactory(
      name: "MessageReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageReceiver__factory>;
    getContractFactory(
      name: "MessageSender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageSender__factory>;
    getContractFactory(
      name: "Faucet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Faucet__factory>;
    getContractFactory(
      name: "MintableERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MintableERC20__factory>;
    getContractFactory(
      name: "OriginalTokenVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OriginalTokenVault__factory>;
    getContractFactory(
      name: "PeggedTokenBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PeggedTokenBridge__factory>;
    getContractFactory(
      name: "FraxBridgeToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FraxBridgeToken__factory>;
    getContractFactory(
      name: "IFraxCanoToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFraxCanoToken__factory>;
    getContractFactory(
      name: "IMaiBridgeHub",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMaiBridgeHub__factory>;
    getContractFactory(
      name: "MaiBridgeToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MaiBridgeToken__factory>;
    getContractFactory(
      name: "MintSwapCanonicalTokenPermit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MintSwapCanonicalTokenPermit__factory>;
    getContractFactory(
      name: "MultiBridgeTokenPermit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiBridgeTokenPermit__factory>;
    getContractFactory(
      name: "SingleBridgeTokenPermit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SingleBridgeTokenPermit__factory>;
    getContractFactory(
      name: "MintSwapCanonicalToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MintSwapCanonicalToken__factory>;
    getContractFactory(
      name: "MultiBridgeToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiBridgeToken__factory>;
    getContractFactory(
      name: "SingleBridgeToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SingleBridgeToken__factory>;
    getContractFactory(
      name: "ISwapCanoToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwapCanoToken__factory>;
    getContractFactory(
      name: "SwapBridgeToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SwapBridgeToken__factory>;
    getContractFactory(
      name: "Pool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pool__factory>;
    getContractFactory(
      name: "DelayedTransfer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DelayedTransfer__factory>;
    getContractFactory(
      name: "Governor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Governor__factory>;
    getContractFactory(
      name: "Pauser",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pauser__factory>;
    getContractFactory(
      name: "VolumeControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VolumeControl__factory>;
    getContractFactory(
      name: "Whitelist",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Whitelist__factory>;
    getContractFactory(
      name: "SGN",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SGN__factory>;
    getContractFactory(
      name: "Signers",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Signers__factory>;
    getContractFactory(
      name: "Staking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Staking__factory>;
    getContractFactory(
      name: "StakingReward",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingReward__factory>;
    getContractFactory(
      name: "DummySwap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DummySwap__factory>;
    getContractFactory(
      name: "TestERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestERC20__factory>;
    getContractFactory(
      name: "Viewer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Viewer__factory>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
  }
}

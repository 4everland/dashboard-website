/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MessageSenderInterface extends ethers.utils.Interface {
  functions: {
    "feeBase()": FunctionFragment;
    "feePerByte()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sendMessage(address,uint256,bytes)": FunctionFragment;
    "sendMessageWithTransfer(address,uint256,address,bytes32,bytes)": FunctionFragment;
    "setFeeBase(uint256)": FunctionFragment;
    "setFeePerByte(uint256)": FunctionFragment;
    "sigsVerifier()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawFee(address,uint256,bytes[],address[],uint256[])": FunctionFragment;
    "withdrawnFees(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "feeBase", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feePerByte",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessageWithTransfer",
    values: [string, BigNumberish, string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeBase",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeePerByte",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sigsVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFee",
    values: [string, BigNumberish, BytesLike[], string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawnFees",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "feeBase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feePerByte", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessageWithTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeeBase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeePerByte",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sigsVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawnFees",
    data: BytesLike
  ): Result;

  events: {
    "Message(address,address,uint256,bytes)": EventFragment;
    "MessageWithTransfer(address,address,uint256,address,bytes32,bytes)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Message"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageWithTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class MessageSender extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MessageSenderInterface;

  functions: {
    feeBase(overrides?: CallOverrides): Promise<[BigNumber]>;

    feePerByte(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendMessage(
      _receiver: string,
      _dstChainId: BigNumberish,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendMessageWithTransfer(
      _receiver: string,
      _dstChainId: BigNumberish,
      _bridge: string,
      _srcTransferId: BytesLike,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeBase(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeePerByte(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sigsVerifier(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFee(
      _account: string,
      _cumulativeFee: BigNumberish,
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawnFees(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  feeBase(overrides?: CallOverrides): Promise<BigNumber>;

  feePerByte(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendMessage(
    _receiver: string,
    _dstChainId: BigNumberish,
    _message: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendMessageWithTransfer(
    _receiver: string,
    _dstChainId: BigNumberish,
    _bridge: string,
    _srcTransferId: BytesLike,
    _message: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeBase(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeePerByte(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sigsVerifier(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFee(
    _account: string,
    _cumulativeFee: BigNumberish,
    _sigs: BytesLike[],
    _signers: string[],
    _powers: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawnFees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    feeBase(overrides?: CallOverrides): Promise<BigNumber>;

    feePerByte(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sendMessage(
      _receiver: string,
      _dstChainId: BigNumberish,
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    sendMessageWithTransfer(
      _receiver: string,
      _dstChainId: BigNumberish,
      _bridge: string,
      _srcTransferId: BytesLike,
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeBase(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setFeePerByte(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    sigsVerifier(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFee(
      _account: string,
      _cumulativeFee: BigNumberish,
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawnFees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    Message(
      sender?: string | null,
      receiver?: null,
      dstChainId?: null,
      message?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        sender: string;
        receiver: string;
        dstChainId: BigNumber;
        message: string;
      }
    >;

    MessageWithTransfer(
      sender?: string | null,
      receiver?: null,
      dstChainId?: null,
      bridge?: null,
      srcTransferId?: null,
      message?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, string, string],
      {
        sender: string;
        receiver: string;
        dstChainId: BigNumber;
        bridge: string;
        srcTransferId: string;
        message: string;
      }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    feeBase(overrides?: CallOverrides): Promise<BigNumber>;

    feePerByte(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendMessage(
      _receiver: string,
      _dstChainId: BigNumberish,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendMessageWithTransfer(
      _receiver: string,
      _dstChainId: BigNumberish,
      _bridge: string,
      _srcTransferId: BytesLike,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeBase(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeePerByte(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sigsVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFee(
      _account: string,
      _cumulativeFee: BigNumberish,
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawnFees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    feeBase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feePerByte(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendMessage(
      _receiver: string,
      _dstChainId: BigNumberish,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendMessageWithTransfer(
      _receiver: string,
      _dstChainId: BigNumberish,
      _bridge: string,
      _srcTransferId: BytesLike,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeBase(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeePerByte(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sigsVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFee(
      _account: string,
      _cumulativeFee: BigNumberish,
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawnFees(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PeggedTokenBridgeInterface extends ethers.utils.Interface {
  functions: {
    "addGovernor(address)": FunctionFragment;
    "addPauser(address)": FunctionFragment;
    "burn(address,uint256,address,uint64)": FunctionFragment;
    "delayPeriod()": FunctionFragment;
    "delayThresholds(address)": FunctionFragment;
    "delayedTransfers(bytes32)": FunctionFragment;
    "epochLength()": FunctionFragment;
    "epochVolumeCaps(address)": FunctionFragment;
    "epochVolumes(address)": FunctionFragment;
    "executeDelayedTransfer(bytes32)": FunctionFragment;
    "governors(address)": FunctionFragment;
    "isGovernor(address)": FunctionFragment;
    "isPauser(address)": FunctionFragment;
    "lastOpTimestamps(address)": FunctionFragment;
    "maxBurn(address)": FunctionFragment;
    "minBurn(address)": FunctionFragment;
    "mint(bytes,bytes[],address[],uint256[])": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pausers(address)": FunctionFragment;
    "records(bytes32)": FunctionFragment;
    "removeGovernor(address)": FunctionFragment;
    "removePauser(address)": FunctionFragment;
    "renounceGovernor()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renouncePauser()": FunctionFragment;
    "setDelayPeriod(uint256)": FunctionFragment;
    "setDelayThresholds(address[],uint256[])": FunctionFragment;
    "setEpochLength(uint256)": FunctionFragment;
    "setEpochVolumeCaps(address[],uint256[])": FunctionFragment;
    "setMaxBurn(address[],uint256[])": FunctionFragment;
    "setMinBurn(address[],uint256[])": FunctionFragment;
    "sigsVerifier()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addGovernor", values: [string]): string;
  encodeFunctionData(functionFragment: "addPauser", values: [string]): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delayPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delayThresholds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "delayedTransfers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "epochLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochVolumeCaps",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "epochVolumes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "executeDelayedTransfer",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "governors", values: [string]): string;
  encodeFunctionData(functionFragment: "isGovernor", values: [string]): string;
  encodeFunctionData(functionFragment: "isPauser", values: [string]): string;
  encodeFunctionData(
    functionFragment: "lastOpTimestamps",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "maxBurn", values: [string]): string;
  encodeFunctionData(functionFragment: "minBurn", values: [string]): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BytesLike, BytesLike[], string[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pausers", values: [string]): string;
  encodeFunctionData(functionFragment: "records", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "removeGovernor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removePauser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renouncePauser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDelayPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelayThresholds",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setEpochLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEpochVolumeCaps",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxBurn",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinBurn",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "sigsVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPauser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delayPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delayThresholds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delayedTransfers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochVolumeCaps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochVolumes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeDelayedTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governors", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isGovernor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPauser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastOpTimestamps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxBurn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minBurn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pausers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "records", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renouncePauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelayPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelayThresholds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEpochLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEpochVolumeCaps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMaxBurn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setMinBurn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sigsVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "Burn(bytes32,address,address,uint256,address)": EventFragment;
    "DelayPeriodUpdated(uint256)": EventFragment;
    "DelayThresholdUpdated(address,uint256)": EventFragment;
    "DelayedTransferAdded(bytes32)": EventFragment;
    "DelayedTransferExecuted(bytes32,address,address,uint256)": EventFragment;
    "EpochLengthUpdated(uint256)": EventFragment;
    "EpochVolumeUpdated(address,uint256)": EventFragment;
    "GovernorAdded(address)": EventFragment;
    "GovernorRemoved(address)": EventFragment;
    "MaxBurnUpdated(address,uint256)": EventFragment;
    "MinBurnUpdated(address,uint256)": EventFragment;
    "Mint(bytes32,address,address,uint256,uint64,bytes32,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PauserAdded(address)": EventFragment;
    "PauserRemoved(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelayPeriodUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelayThresholdUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelayedTransferAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelayedTransferExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EpochLengthUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EpochVolumeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernorAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernorRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxBurnUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinBurnUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauserAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauserRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export class PeggedTokenBridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PeggedTokenBridgeInterface;

  functions: {
    addGovernor(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burn(
      _token: string,
      _amount: BigNumberish,
      _withdrawAccount: string,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delayPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    delayThresholds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    delayedTransfers(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        receiver: string;
        token: string;
        amount: BigNumber;
        timestamp: BigNumber;
      }
    >;

    epochLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    epochVolumeCaps(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    epochVolumes(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    executeDelayedTransfer(
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    governors(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isGovernor(_account: string, overrides?: CallOverrides): Promise<[boolean]>;

    isPauser(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    lastOpTimestamps(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxBurn(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    minBurn(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      _request: BytesLike,
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pausers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    records(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    removeGovernor(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removePauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceGovernor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renouncePauser(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDelayPeriod(
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDelayThresholds(
      _tokens: string[],
      _thresholds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEpochLength(
      _length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEpochVolumeCaps(
      _tokens: string[],
      _caps: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxBurn(
      _tokens: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinBurn(
      _tokens: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sigsVerifier(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addGovernor(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addPauser(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burn(
    _token: string,
    _amount: BigNumberish,
    _withdrawAccount: string,
    _nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delayPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  delayThresholds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  delayedTransfers(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber] & {
      receiver: string;
      token: string;
      amount: BigNumber;
      timestamp: BigNumber;
    }
  >;

  epochLength(overrides?: CallOverrides): Promise<BigNumber>;

  epochVolumeCaps(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  epochVolumes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  executeDelayedTransfer(
    id: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  governors(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isGovernor(_account: string, overrides?: CallOverrides): Promise<boolean>;

  isPauser(account: string, overrides?: CallOverrides): Promise<boolean>;

  lastOpTimestamps(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxBurn(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  minBurn(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    _request: BytesLike,
    _sigs: BytesLike[],
    _signers: string[],
    _powers: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pausers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  records(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  removeGovernor(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removePauser(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceGovernor(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renouncePauser(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDelayPeriod(
    _period: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDelayThresholds(
    _tokens: string[],
    _thresholds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEpochLength(
    _length: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEpochVolumeCaps(
    _tokens: string[],
    _caps: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxBurn(
    _tokens: string[],
    _amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinBurn(
    _tokens: string[],
    _amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sigsVerifier(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addGovernor(_account: string, overrides?: CallOverrides): Promise<void>;

    addPauser(account: string, overrides?: CallOverrides): Promise<void>;

    burn(
      _token: string,
      _amount: BigNumberish,
      _withdrawAccount: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    delayPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    delayThresholds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delayedTransfers(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        receiver: string;
        token: string;
        amount: BigNumber;
        timestamp: BigNumber;
      }
    >;

    epochLength(overrides?: CallOverrides): Promise<BigNumber>;

    epochVolumeCaps(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochVolumes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    executeDelayedTransfer(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    governors(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isGovernor(_account: string, overrides?: CallOverrides): Promise<boolean>;

    isPauser(account: string, overrides?: CallOverrides): Promise<boolean>;

    lastOpTimestamps(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxBurn(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    minBurn(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _request: BytesLike,
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pausers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    records(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    removeGovernor(_account: string, overrides?: CallOverrides): Promise<void>;

    removePauser(account: string, overrides?: CallOverrides): Promise<void>;

    renounceGovernor(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renouncePauser(overrides?: CallOverrides): Promise<void>;

    setDelayPeriod(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDelayThresholds(
      _tokens: string[],
      _thresholds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setEpochLength(
      _length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setEpochVolumeCaps(
      _tokens: string[],
      _caps: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxBurn(
      _tokens: string[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setMinBurn(
      _tokens: string[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    sigsVerifier(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    Burn(
      burnId?: null,
      token?: null,
      account?: null,
      amount?: null,
      withdrawAccount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, string],
      {
        burnId: string;
        token: string;
        account: string;
        amount: BigNumber;
        withdrawAccount: string;
      }
    >;

    DelayPeriodUpdated(
      period?: null
    ): TypedEventFilter<[BigNumber], { period: BigNumber }>;

    DelayThresholdUpdated(
      token?: null,
      threshold?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; threshold: BigNumber }
    >;

    DelayedTransferAdded(id?: null): TypedEventFilter<[string], { id: string }>;

    DelayedTransferExecuted(
      id?: null,
      receiver?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { id: string; receiver: string; token: string; amount: BigNumber }
    >;

    EpochLengthUpdated(
      length?: null
    ): TypedEventFilter<[BigNumber], { length: BigNumber }>;

    EpochVolumeUpdated(
      token?: null,
      cap?: null
    ): TypedEventFilter<[string, BigNumber], { token: string; cap: BigNumber }>;

    GovernorAdded(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    GovernorRemoved(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    MaxBurnUpdated(
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    MinBurnUpdated(
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    Mint(
      mintId?: null,
      token?: null,
      account?: null,
      amount?: null,
      refChainId?: null,
      refId?: null,
      depositor?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, string, string],
      {
        mintId: string;
        token: string;
        account: string;
        amount: BigNumber;
        refChainId: BigNumber;
        refId: string;
        depositor: string;
      }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    PauserAdded(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    PauserRemoved(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    addGovernor(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addPauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burn(
      _token: string,
      _amount: BigNumberish,
      _withdrawAccount: string,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delayPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    delayThresholds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delayedTransfers(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochLength(overrides?: CallOverrides): Promise<BigNumber>;

    epochVolumeCaps(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochVolumes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    executeDelayedTransfer(
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    governors(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isGovernor(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    isPauser(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    lastOpTimestamps(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxBurn(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    minBurn(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _request: BytesLike,
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pausers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    records(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    removeGovernor(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removePauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceGovernor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renouncePauser(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDelayPeriod(
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDelayThresholds(
      _tokens: string[],
      _thresholds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEpochLength(
      _length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEpochVolumeCaps(
      _tokens: string[],
      _caps: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxBurn(
      _tokens: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinBurn(
      _tokens: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sigsVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addGovernor(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addPauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burn(
      _token: string,
      _amount: BigNumberish,
      _withdrawAccount: string,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delayPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delayThresholds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delayedTransfers(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epochLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochVolumeCaps(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epochVolumes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeDelayedTransfer(
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    governors(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGovernor(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPauser(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastOpTimestamps(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxBurn(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minBurn(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      _request: BytesLike,
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pausers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    records(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeGovernor(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removePauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceGovernor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renouncePauser(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDelayPeriod(
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDelayThresholds(
      _tokens: string[],
      _thresholds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEpochLength(
      _length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEpochVolumeCaps(
      _tokens: string[],
      _caps: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxBurn(
      _tokens: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinBurn(
      _tokens: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sigsVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface StakingInterface extends ethers.utils.Interface {
  functions: {
    "CELER_TOKEN()": FunctionFragment;
    "addPauser(address)": FunctionFragment;
    "addWhitelisted(address)": FunctionFragment;
    "bondValidator()": FunctionFragment;
    "bondedTokens()": FunctionFragment;
    "bondedValAddrs(uint256)": FunctionFragment;
    "collectForfeiture()": FunctionFragment;
    "completeUndelegate(address)": FunctionFragment;
    "confirmUnbondedValidator(address)": FunctionFragment;
    "delegate(address,uint256)": FunctionFragment;
    "drainToken(uint256)": FunctionFragment;
    "forfeiture()": FunctionFragment;
    "getBondedValidatorNum()": FunctionFragment;
    "getBondedValidatorsTokens()": FunctionFragment;
    "getDelegatorInfo(address,address)": FunctionFragment;
    "getParamValue(uint8)": FunctionFragment;
    "getQuorumTokens()": FunctionFragment;
    "getValidatorNum()": FunctionFragment;
    "getValidatorStatus(address)": FunctionFragment;
    "getValidatorTokens(address)": FunctionFragment;
    "govContract()": FunctionFragment;
    "hasMinRequiredTokens(address,bool)": FunctionFragment;
    "initializeValidator(address,uint256,uint64)": FunctionFragment;
    "isBondedValidator(address)": FunctionFragment;
    "isPauser(address)": FunctionFragment;
    "isWhitelisted(address)": FunctionFragment;
    "nextBondBlock()": FunctionFragment;
    "owner()": FunctionFragment;
    "params(uint8)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pausers(address)": FunctionFragment;
    "removePauser(address)": FunctionFragment;
    "removeWhitelisted(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renouncePauser()": FunctionFragment;
    "rewardContract()": FunctionFragment;
    "setGovContract(address)": FunctionFragment;
    "setMaxSlashFactor(uint256)": FunctionFragment;
    "setParamValue(uint8,uint256)": FunctionFragment;
    "setRewardContract(address)": FunctionFragment;
    "setWhitelistEnabled(bool)": FunctionFragment;
    "signerVals(address)": FunctionFragment;
    "slash(bytes,bytes[])": FunctionFragment;
    "slashNonces(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "undelegateShares(address,uint256)": FunctionFragment;
    "undelegateTokens(address,uint256)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateCommissionRate(uint64)": FunctionFragment;
    "updateMinSelfDelegation(uint256)": FunctionFragment;
    "updateValidatorSigner(address)": FunctionFragment;
    "valAddrs(uint256)": FunctionFragment;
    "validatorNotice(address,string,bytes)": FunctionFragment;
    "validators(address)": FunctionFragment;
    "verifySignatures(bytes,bytes[])": FunctionFragment;
    "verifySigs(bytes,bytes[],address[],uint256[])": FunctionFragment;
    "whitelist(address)": FunctionFragment;
    "whitelistEnabled()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CELER_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addPauser", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "bondValidator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bondedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bondedValAddrs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectForfeiture",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeUndelegate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmUnbondedValidator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "delegate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "drainToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forfeiture",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBondedValidatorNum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBondedValidatorsTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegatorInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getParamValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuorumTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorNum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorStatus",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "govContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasMinRequiredTokens",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeValidator",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isBondedValidator",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isPauser", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "nextBondBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "params",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pausers", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removePauser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renouncePauser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setGovContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxSlashFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setParamValue",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "signerVals", values: [string]): string;
  encodeFunctionData(
    functionFragment: "slash",
    values: [BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "slashNonces",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "undelegateShares",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "undelegateTokens",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateCommissionRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinSelfDelegation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateValidatorSigner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "valAddrs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorNotice",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "validators", values: [string]): string;
  encodeFunctionData(
    functionFragment: "verifySignatures",
    values: [BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "verifySigs",
    values: [BytesLike, BytesLike[], string[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "whitelist", values: [string]): string;
  encodeFunctionData(
    functionFragment: "whitelistEnabled",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "CELER_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPauser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondedValAddrs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectForfeiture",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeUndelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmUnbondedValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "drainToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "forfeiture", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBondedValidatorNum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBondedValidatorsTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatorInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParamValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuorumTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorNum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "govContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasMinRequiredTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBondedValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPauser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextBondBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "params", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pausers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removePauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renouncePauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSlashFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setParamValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "signerVals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "slash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "slashNonces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "undelegateShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "undelegateTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateCommissionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinSelfDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateValidatorSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "valAddrs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validatorNotice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validators", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifySignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifySigs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistEnabled",
    data: BytesLike
  ): Result;

  events: {
    "DelegationUpdate(address,address,uint256,uint256,int256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PauserAdded(address)": EventFragment;
    "PauserRemoved(address)": EventFragment;
    "Slash(address,uint64,uint256)": EventFragment;
    "SlashAmtCollected(address,uint256)": EventFragment;
    "Undelegated(address,address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "ValidatorNotice(address,string,bytes,address)": EventFragment;
    "ValidatorStatusUpdate(address,uint8)": EventFragment;
    "WhitelistedAdded(address)": EventFragment;
    "WhitelistedRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DelegationUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauserAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauserRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Slash"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SlashAmtCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Undelegated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorNotice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorStatusUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistedAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistedRemoved"): EventFragment;
}

export class Staking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StakingInterface;

  functions: {
    CELER_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    addPauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addWhitelisted(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bondValidator(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bondedTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    bondedValAddrs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    collectForfeiture(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    completeUndelegate(
      _valAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    confirmUnbondedValidator(
      _valAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegate(
      _valAddr: string,
      _tokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    drainToken(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forfeiture(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBondedValidatorNum(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBondedValidatorsTokens(
      overrides?: CallOverrides
    ): Promise<
      [([string, BigNumber] & { valAddr: string; tokens: BigNumber })[]]
    >;

    getDelegatorInfo(
      _valAddr: string,
      _delAddr: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          BigNumber,
          ([BigNumber, BigNumber] & {
            shares: BigNumber;
            creationBlock: BigNumber;
          })[],
          BigNumber,
          BigNumber
        ] & {
          valAddr: string;
          tokens: BigNumber;
          shares: BigNumber;
          undelegations: ([BigNumber, BigNumber] & {
            shares: BigNumber;
            creationBlock: BigNumber;
          })[];
          undelegationTokens: BigNumber;
          withdrawableUndelegationTokens: BigNumber;
        }
      ]
    >;

    getParamValue(
      _name: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getQuorumTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    getValidatorNum(overrides?: CallOverrides): Promise<[BigNumber]>;

    getValidatorStatus(
      _valAddr: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getValidatorTokens(
      _valAddr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    govContract(overrides?: CallOverrides): Promise<[string]>;

    hasMinRequiredTokens(
      _valAddr: string,
      _checkSelfDelegation: boolean,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initializeValidator(
      _signer: string,
      _minSelfDelegation: BigNumberish,
      _commissionRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isBondedValidator(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPauser(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    isWhitelisted(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nextBondBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    params(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pausers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    removePauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeWhitelisted(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renouncePauser(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardContract(overrides?: CallOverrides): Promise<[string]>;

    setGovContract(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxSlashFactor(
      _maxSlashFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setParamValue(
      _name: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardContract(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWhitelistEnabled(
      _whitelistEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signerVals(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    slash(
      _slashRequest: BytesLike,
      _sigs: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    slashNonces(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    undelegateShares(
      _valAddr: string,
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    undelegateTokens(
      _valAddr: string,
      _tokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCommissionRate(
      _newRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMinSelfDelegation(
      _minSelfDelegation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateValidatorSigner(
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    valAddrs(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    validatorNotice(
      _valAddr: string,
      _key: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        status: number;
        signer: string;
        tokens: BigNumber;
        shares: BigNumber;
        undelegationTokens: BigNumber;
        undelegationShares: BigNumber;
        minSelfDelegation: BigNumber;
        bondBlock: BigNumber;
        unbondBlock: BigNumber;
        commissionRate: BigNumber;
      }
    >;

    verifySignatures(
      _msg: BytesLike,
      _sigs: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifySigs(
      _msg: BytesLike,
      _sigs: BytesLike[],
      arg2: string[],
      arg3: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[void]>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    whitelistEnabled(overrides?: CallOverrides): Promise<[boolean]>;
  };

  CELER_TOKEN(overrides?: CallOverrides): Promise<string>;

  addPauser(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addWhitelisted(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bondValidator(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bondedTokens(overrides?: CallOverrides): Promise<BigNumber>;

  bondedValAddrs(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  collectForfeiture(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  completeUndelegate(
    _valAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  confirmUnbondedValidator(
    _valAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegate(
    _valAddr: string,
    _tokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  drainToken(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  forfeiture(overrides?: CallOverrides): Promise<BigNumber>;

  getBondedValidatorNum(overrides?: CallOverrides): Promise<BigNumber>;

  getBondedValidatorsTokens(
    overrides?: CallOverrides
  ): Promise<([string, BigNumber] & { valAddr: string; tokens: BigNumber })[]>;

  getDelegatorInfo(
    _valAddr: string,
    _delAddr: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      ([BigNumber, BigNumber] & {
        shares: BigNumber;
        creationBlock: BigNumber;
      })[],
      BigNumber,
      BigNumber
    ] & {
      valAddr: string;
      tokens: BigNumber;
      shares: BigNumber;
      undelegations: ([BigNumber, BigNumber] & {
        shares: BigNumber;
        creationBlock: BigNumber;
      })[];
      undelegationTokens: BigNumber;
      withdrawableUndelegationTokens: BigNumber;
    }
  >;

  getParamValue(
    _name: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getQuorumTokens(overrides?: CallOverrides): Promise<BigNumber>;

  getValidatorNum(overrides?: CallOverrides): Promise<BigNumber>;

  getValidatorStatus(
    _valAddr: string,
    overrides?: CallOverrides
  ): Promise<number>;

  getValidatorTokens(
    _valAddr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  govContract(overrides?: CallOverrides): Promise<string>;

  hasMinRequiredTokens(
    _valAddr: string,
    _checkSelfDelegation: boolean,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initializeValidator(
    _signer: string,
    _minSelfDelegation: BigNumberish,
    _commissionRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isBondedValidator(_addr: string, overrides?: CallOverrides): Promise<boolean>;

  isPauser(account: string, overrides?: CallOverrides): Promise<boolean>;

  isWhitelisted(account: string, overrides?: CallOverrides): Promise<boolean>;

  nextBondBlock(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  params(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pausers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  removePauser(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeWhitelisted(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renouncePauser(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardContract(overrides?: CallOverrides): Promise<string>;

  setGovContract(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxSlashFactor(
    _maxSlashFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setParamValue(
    _name: BigNumberish,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardContract(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWhitelistEnabled(
    _whitelistEnabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signerVals(arg0: string, overrides?: CallOverrides): Promise<string>;

  slash(
    _slashRequest: BytesLike,
    _sigs: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  slashNonces(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  undelegateShares(
    _valAddr: string,
    _shares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  undelegateTokens(
    _valAddr: string,
    _tokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCommissionRate(
    _newRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMinSelfDelegation(
    _minSelfDelegation: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateValidatorSigner(
    _signer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  valAddrs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  validatorNotice(
    _valAddr: string,
    _key: string,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validators(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      status: number;
      signer: string;
      tokens: BigNumber;
      shares: BigNumber;
      undelegationTokens: BigNumber;
      undelegationShares: BigNumber;
      minSelfDelegation: BigNumber;
      bondBlock: BigNumber;
      unbondBlock: BigNumber;
      commissionRate: BigNumber;
    }
  >;

  verifySignatures(
    _msg: BytesLike,
    _sigs: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifySigs(
    _msg: BytesLike,
    _sigs: BytesLike[],
    arg2: string[],
    arg3: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<void>;

  whitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  whitelistEnabled(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    CELER_TOKEN(overrides?: CallOverrides): Promise<string>;

    addPauser(account: string, overrides?: CallOverrides): Promise<void>;

    addWhitelisted(account: string, overrides?: CallOverrides): Promise<void>;

    bondValidator(overrides?: CallOverrides): Promise<void>;

    bondedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    bondedValAddrs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    collectForfeiture(overrides?: CallOverrides): Promise<void>;

    completeUndelegate(
      _valAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    confirmUnbondedValidator(
      _valAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    delegate(
      _valAddr: string,
      _tokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    drainToken(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    forfeiture(overrides?: CallOverrides): Promise<BigNumber>;

    getBondedValidatorNum(overrides?: CallOverrides): Promise<BigNumber>;

    getBondedValidatorsTokens(
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber] & { valAddr: string; tokens: BigNumber })[]
    >;

    getDelegatorInfo(
      _valAddr: string,
      _delAddr: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        ([BigNumber, BigNumber] & {
          shares: BigNumber;
          creationBlock: BigNumber;
        })[],
        BigNumber,
        BigNumber
      ] & {
        valAddr: string;
        tokens: BigNumber;
        shares: BigNumber;
        undelegations: ([BigNumber, BigNumber] & {
          shares: BigNumber;
          creationBlock: BigNumber;
        })[];
        undelegationTokens: BigNumber;
        withdrawableUndelegationTokens: BigNumber;
      }
    >;

    getParamValue(
      _name: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuorumTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getValidatorNum(overrides?: CallOverrides): Promise<BigNumber>;

    getValidatorStatus(
      _valAddr: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getValidatorTokens(
      _valAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    govContract(overrides?: CallOverrides): Promise<string>;

    hasMinRequiredTokens(
      _valAddr: string,
      _checkSelfDelegation: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initializeValidator(
      _signer: string,
      _minSelfDelegation: BigNumberish,
      _commissionRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isBondedValidator(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPauser(account: string, overrides?: CallOverrides): Promise<boolean>;

    isWhitelisted(account: string, overrides?: CallOverrides): Promise<boolean>;

    nextBondBlock(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    params(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pausers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    removePauser(account: string, overrides?: CallOverrides): Promise<void>;

    removeWhitelisted(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renouncePauser(overrides?: CallOverrides): Promise<void>;

    rewardContract(overrides?: CallOverrides): Promise<string>;

    setGovContract(_addr: string, overrides?: CallOverrides): Promise<void>;

    setMaxSlashFactor(
      _maxSlashFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setParamValue(
      _name: BigNumberish,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardContract(_addr: string, overrides?: CallOverrides): Promise<void>;

    setWhitelistEnabled(
      _whitelistEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    signerVals(arg0: string, overrides?: CallOverrides): Promise<string>;

    slash(
      _slashRequest: BytesLike,
      _sigs: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    slashNonces(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    undelegateShares(
      _valAddr: string,
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    undelegateTokens(
      _valAddr: string,
      _tokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateCommissionRate(
      _newRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMinSelfDelegation(
      _minSelfDelegation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateValidatorSigner(
      _signer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    valAddrs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    validatorNotice(
      _valAddr: string,
      _key: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    validators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        status: number;
        signer: string;
        tokens: BigNumber;
        shares: BigNumber;
        undelegationTokens: BigNumber;
        undelegationShares: BigNumber;
        minSelfDelegation: BigNumber;
        bondBlock: BigNumber;
        unbondBlock: BigNumber;
        commissionRate: BigNumber;
      }
    >;

    verifySignatures(
      _msg: BytesLike,
      _sigs: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifySigs(
      _msg: BytesLike,
      _sigs: BytesLike[],
      arg2: string[],
      arg3: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    whitelistEnabled(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    DelegationUpdate(
      valAddr?: string | null,
      delAddr?: string | null,
      valTokens?: null,
      delShares?: null,
      tokenDiff?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        valAddr: string;
        delAddr: string;
        valTokens: BigNumber;
        delShares: BigNumber;
        tokenDiff: BigNumber;
      }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    PauserAdded(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    PauserRemoved(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Slash(
      valAddr?: string | null,
      nonce?: null,
      slashAmt?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { valAddr: string; nonce: BigNumber; slashAmt: BigNumber }
    >;

    SlashAmtCollected(
      recipient?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { recipient: string; amount: BigNumber }
    >;

    Undelegated(
      valAddr?: string | null,
      delAddr?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { valAddr: string; delAddr: string; amount: BigNumber }
    >;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;

    ValidatorNotice(
      valAddr?: string | null,
      key?: null,
      data?: null,
      from?: null
    ): TypedEventFilter<
      [string, string, string, string],
      { valAddr: string; key: string; data: string; from: string }
    >;

    ValidatorStatusUpdate(
      valAddr?: string | null,
      status?: BigNumberish | null
    ): TypedEventFilter<[string, number], { valAddr: string; status: number }>;

    WhitelistedAdded(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    WhitelistedRemoved(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    CELER_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    addPauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addWhitelisted(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bondValidator(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bondedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    bondedValAddrs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectForfeiture(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    completeUndelegate(
      _valAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    confirmUnbondedValidator(
      _valAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegate(
      _valAddr: string,
      _tokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    drainToken(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    forfeiture(overrides?: CallOverrides): Promise<BigNumber>;

    getBondedValidatorNum(overrides?: CallOverrides): Promise<BigNumber>;

    getBondedValidatorsTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getDelegatorInfo(
      _valAddr: string,
      _delAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getParamValue(
      _name: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuorumTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getValidatorNum(overrides?: CallOverrides): Promise<BigNumber>;

    getValidatorStatus(
      _valAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidatorTokens(
      _valAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    govContract(overrides?: CallOverrides): Promise<BigNumber>;

    hasMinRequiredTokens(
      _valAddr: string,
      _checkSelfDelegation: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializeValidator(
      _signer: string,
      _minSelfDelegation: BigNumberish,
      _commissionRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isBondedValidator(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPauser(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    isWhitelisted(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextBondBlock(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    params(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pausers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    removePauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeWhitelisted(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renouncePauser(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardContract(overrides?: CallOverrides): Promise<BigNumber>;

    setGovContract(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxSlashFactor(
      _maxSlashFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setParamValue(
      _name: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardContract(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWhitelistEnabled(
      _whitelistEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signerVals(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    slash(
      _slashRequest: BytesLike,
      _sigs: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    slashNonces(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    undelegateShares(
      _valAddr: string,
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    undelegateTokens(
      _valAddr: string,
      _tokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCommissionRate(
      _newRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMinSelfDelegation(
      _minSelfDelegation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateValidatorSigner(
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    valAddrs(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    validatorNotice(
      _valAddr: string,
      _key: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validators(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    verifySignatures(
      _msg: BytesLike,
      _sigs: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifySigs(
      _msg: BytesLike,
      _sigs: BytesLike[],
      arg2: string[],
      arg3: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    whitelistEnabled(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CELER_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addPauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addWhitelisted(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bondValidator(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bondedTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bondedValAddrs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectForfeiture(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    completeUndelegate(
      _valAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    confirmUnbondedValidator(
      _valAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegate(
      _valAddr: string,
      _tokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    drainToken(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    forfeiture(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBondedValidatorNum(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBondedValidatorsTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDelegatorInfo(
      _valAddr: string,
      _delAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getParamValue(
      _name: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuorumTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getValidatorNum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getValidatorStatus(
      _valAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidatorTokens(
      _valAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    govContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasMinRequiredTokens(
      _valAddr: string,
      _checkSelfDelegation: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initializeValidator(
      _signer: string,
      _minSelfDelegation: BigNumberish,
      _commissionRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isBondedValidator(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPauser(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelisted(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextBondBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    params(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pausers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removePauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeWhitelisted(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renouncePauser(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setGovContract(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxSlashFactor(
      _maxSlashFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setParamValue(
      _name: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardContract(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWhitelistEnabled(
      _whitelistEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signerVals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    slash(
      _slashRequest: BytesLike,
      _sigs: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    slashNonces(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    undelegateShares(
      _valAddr: string,
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    undelegateTokens(
      _valAddr: string,
      _tokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCommissionRate(
      _newRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMinSelfDelegation(
      _minSelfDelegation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateValidatorSigner(
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    valAddrs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validatorNotice(
      _valAddr: string,
      _key: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifySignatures(
      _msg: BytesLike,
      _sigs: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifySigs(
      _msg: BytesLike,
      _sigs: BytesLike[],
      arg2: string[],
      arg3: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

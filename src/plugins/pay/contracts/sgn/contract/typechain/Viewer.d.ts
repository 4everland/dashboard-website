/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ViewerInterface extends ethers.utils.Interface {
  functions: {
    "getBondedValidatorInfos()": FunctionFragment;
    "getDelegatorInfos(address)": FunctionFragment;
    "getDelegatorTokens(address)": FunctionFragment;
    "getMinValidatorTokens()": FunctionFragment;
    "getValidatorInfo(address)": FunctionFragment;
    "getValidatorInfos()": FunctionFragment;
    "shouldBondValidator(address)": FunctionFragment;
    "staking()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getBondedValidatorInfos",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegatorInfos",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegatorTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinValidatorTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorInfos",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "shouldBondValidator",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "staking", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "getBondedValidatorInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatorInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatorTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinValidatorTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shouldBondValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "staking", data: BytesLike): Result;

  events: {};
}

export class Viewer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ViewerInterface;

  functions: {
    getBondedValidatorInfos(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          number,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          valAddr: string;
          status: number;
          signer: string;
          tokens: BigNumber;
          shares: BigNumber;
          minSelfDelegation: BigNumber;
          commissionRate: BigNumber;
        })[]
      ]
    >;

    getDelegatorInfos(
      _delAddr: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          BigNumber,
          BigNumber,
          ([BigNumber, BigNumber] & {
            shares: BigNumber;
            creationBlock: BigNumber;
          })[],
          BigNumber,
          BigNumber
        ] & {
          valAddr: string;
          tokens: BigNumber;
          shares: BigNumber;
          undelegations: ([BigNumber, BigNumber] & {
            shares: BigNumber;
            creationBlock: BigNumber;
          })[];
          undelegationTokens: BigNumber;
          withdrawableUndelegationTokens: BigNumber;
        })[]
      ]
    >;

    getDelegatorTokens(
      _delAddr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getMinValidatorTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    getValidatorInfo(
      _valAddr: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, number, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          valAddr: string;
          status: number;
          signer: string;
          tokens: BigNumber;
          shares: BigNumber;
          minSelfDelegation: BigNumber;
          commissionRate: BigNumber;
        }
      ]
    >;

    getValidatorInfos(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          number,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          valAddr: string;
          status: number;
          signer: string;
          tokens: BigNumber;
          shares: BigNumber;
          minSelfDelegation: BigNumber;
          commissionRate: BigNumber;
        })[]
      ]
    >;

    shouldBondValidator(
      _valAddr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    staking(overrides?: CallOverrides): Promise<[string]>;
  };

  getBondedValidatorInfos(
    overrides?: CallOverrides
  ): Promise<
    ([string, number, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      valAddr: string;
      status: number;
      signer: string;
      tokens: BigNumber;
      shares: BigNumber;
      minSelfDelegation: BigNumber;
      commissionRate: BigNumber;
    })[]
  >;

  getDelegatorInfos(
    _delAddr: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      BigNumber,
      BigNumber,
      ([BigNumber, BigNumber] & {
        shares: BigNumber;
        creationBlock: BigNumber;
      })[],
      BigNumber,
      BigNumber
    ] & {
      valAddr: string;
      tokens: BigNumber;
      shares: BigNumber;
      undelegations: ([BigNumber, BigNumber] & {
        shares: BigNumber;
        creationBlock: BigNumber;
      })[];
      undelegationTokens: BigNumber;
      withdrawableUndelegationTokens: BigNumber;
    })[]
  >;

  getDelegatorTokens(
    _delAddr: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getMinValidatorTokens(overrides?: CallOverrides): Promise<BigNumber>;

  getValidatorInfo(
    _valAddr: string,
    overrides?: CallOverrides
  ): Promise<
    [string, number, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      valAddr: string;
      status: number;
      signer: string;
      tokens: BigNumber;
      shares: BigNumber;
      minSelfDelegation: BigNumber;
      commissionRate: BigNumber;
    }
  >;

  getValidatorInfos(
    overrides?: CallOverrides
  ): Promise<
    ([string, number, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      valAddr: string;
      status: number;
      signer: string;
      tokens: BigNumber;
      shares: BigNumber;
      minSelfDelegation: BigNumber;
      commissionRate: BigNumber;
    })[]
  >;

  shouldBondValidator(
    _valAddr: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  staking(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getBondedValidatorInfos(
      overrides?: CallOverrides
    ): Promise<
      ([string, number, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        valAddr: string;
        status: number;
        signer: string;
        tokens: BigNumber;
        shares: BigNumber;
        minSelfDelegation: BigNumber;
        commissionRate: BigNumber;
      })[]
    >;

    getDelegatorInfos(
      _delAddr: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        BigNumber,
        BigNumber,
        ([BigNumber, BigNumber] & {
          shares: BigNumber;
          creationBlock: BigNumber;
        })[],
        BigNumber,
        BigNumber
      ] & {
        valAddr: string;
        tokens: BigNumber;
        shares: BigNumber;
        undelegations: ([BigNumber, BigNumber] & {
          shares: BigNumber;
          creationBlock: BigNumber;
        })[];
        undelegationTokens: BigNumber;
        withdrawableUndelegationTokens: BigNumber;
      })[]
    >;

    getDelegatorTokens(
      _delAddr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getMinValidatorTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getValidatorInfo(
      _valAddr: string,
      overrides?: CallOverrides
    ): Promise<
      [string, number, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        valAddr: string;
        status: number;
        signer: string;
        tokens: BigNumber;
        shares: BigNumber;
        minSelfDelegation: BigNumber;
        commissionRate: BigNumber;
      }
    >;

    getValidatorInfos(
      overrides?: CallOverrides
    ): Promise<
      ([string, number, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        valAddr: string;
        status: number;
        signer: string;
        tokens: BigNumber;
        shares: BigNumber;
        minSelfDelegation: BigNumber;
        commissionRate: BigNumber;
      })[]
    >;

    shouldBondValidator(
      _valAddr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    staking(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getBondedValidatorInfos(overrides?: CallOverrides): Promise<BigNumber>;

    getDelegatorInfos(
      _delAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDelegatorTokens(
      _delAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinValidatorTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getValidatorInfo(
      _valAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidatorInfos(overrides?: CallOverrides): Promise<BigNumber>;

    shouldBondValidator(
      _valAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    staking(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getBondedValidatorInfos(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDelegatorInfos(
      _delAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDelegatorTokens(
      _delAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinValidatorTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidatorInfo(
      _valAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidatorInfos(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shouldBondValidator(
      _valAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    staking(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
